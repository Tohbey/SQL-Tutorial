My SQL
SQL is a standard language for storing, manipulating and retrieving data in databases.
RDBMS stands for Relational Database Management System.
RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.
Most Important SQL commands:
1. SELECT - extracts data from a database.
2. UPDATE - updates data in a database.
3. DELETE - deletes data from a database.
4. INSERT INTO - inserts new data into a database.
5. CREATE DATABASE - creates a new database.
6. ALTER DATABASE - modifies a database.
7. CREATE TABLE - creates a new table.
8. ALTER TABLE - modifies a table.
9. DROP TABLE - deletes a table.
10. CREATE INDEX - creates an index (search key).
11. DROP INDEX - deletes an index.


SQL SELECT Statement
SELECT column1, column2,.....
FROM table_name;
- If you want to select all the fields available in the table 
SELECT * FROM table_name;


SQL SELECT DISTINCT statement
- The SELECT DISTINCT statement is used to return only distinct (different) values.
SELECT DISTINCT column1, column2, ...
FROM table_name;
- to count the amount of items in a column
SELECT COUNT(DISTINCT Country) FROM Customers;


SQL WHERE Clause
- The WHERE clause is used to filter records.
- It is used to extract only those records that fulfill a specified condition.
SELECT column1, column2, ...
FROM table_name
WHERE condition;
Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
For text field
SELECT * FROM Customers
WHERE Customers.Country='Mexico';
For numeric fields
SELECT * FROM Customers
WHERE Customers.CustomerId=1;
Operators in the WHERE Clause:
Operator	Description
    = 		   equal
    > 		   Greater than
    < 		   Less than
    >= 		   Greater than or equal
    <= 		   Less than or equal
    <> 		   Not equal or != 
    BETWEEN 	   Between a certain range
    LIKE 	   Search for a pattern
    IN 		   To specify multiple possible values for a column
Examples:
- IN
SELECT * FROM Customers
WHERE City IN ('Paris','London');

- LIKE
SELECT * FROM Customers
WHERE City LIKE 's%';
Note: it returns cites that start with s.

- BETWEEN
SELECT * FROM Products
WHERE Price BETWEEN 50 AND 60;
Note: it return products of prices within that range

- <>
SELECT * FROM Products
WHERE Price <> 18;

- <=
SELECT * FROM Products
WHERE Price <= 30;

- >=
SELECT * FROM Products
WHERE Price >= 30;

- >
SELECT * FROM Products
WHERE Price > 30;

- <
SELECT * FROM Products
WHERE Price < 30;

- =
SELECT * FROM Products
WHERE Price = 30;


AND, OR and NOT Operators
- The WHERE clause can be combined with AND, OR, and NOT operators.
- The AND and OR operators are used to filter records based on more than one condition:
- The AND operator displays a record if all the conditions separated by AND are TRUE.
- The OR operator displays a record if any of the conditions separated by OR is TRUE.
- The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

OR Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

NOT Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

Examples
- AND syntax:
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';

- OR syntax:
SELECT * FROM Customers
WHERE City='Berlin' OR City='MÃ¼nchen';

- Not syntax:
SELECT * FROM Customers
WHERE NOT Country='Germany';


ORDER BY keyword
- The ORDER BY keyword is used to sort the result-set in ascending or descending order.
- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
example:
1. Order by
SELECT * FROM Customers
ORDER BY Country;

2. Order By Desc 
SELECT * FROM Customers
ORDER BY Country DESC;

3. ORDER BY Several Columns Example
SELECT * FROM Customers
ORDER BY Country, CustomerName;

4. ORDER BY Several Columns
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;


INSERT INTO statement
- The INSERT INTO statement is used to insert new records in a table.

- it is possible to write the INSERT INTO statement in two ways:
	- Specify both the column names and the values to be inserted:
		INSERT INTO table_name (column1, column2, column3, ...)
		VALUES (value1, value2, value3, ...);
	
	-  If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query:
	   but: However, make sure the order of the values is in the same order as the columns in the table.
		INSERT INTO table_name
		VALUES (value1, value2, value3, ...);

Examples:
- Inserting a new record in the cutomers table:
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
- Inserting data only in specified columns
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');


NULL value
- A field with a NULL value is a field with no value.
- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
NOTE: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation.

Examples:
- to check if a column is Null.
Using IS NULL or IS NOT NULL

	- IS NULL syntax
		SELECT column_names
		FROM table_name
		WHERE column_name IS NULL;

	- IS NOT NULL Syntax
		SELECT column_names
		FROM table_name
		WHERE column_name IS NOT NULL;


UPDATE Syntax:
The UPDATE statement is used to modify the existing records in a table.
i.e:
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. 
If you omit the WHERE clause, all records in the table will be updated!

Example
- Single Column:
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

- Multiple Columns
UPDATE Customers
SET ContactName='Juan'
WHERE Country='Mexico';

Note:
- Be careful when updating records. If you omit the WHERE clause, ALL records will be updated.


DELETE Syntax:
The DELETE statement is used to delete existing records in a table.
i.e:
DELETE FROM table_name WHERE condition;

Note: Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) 
should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

Example:
	- Delete a single record
		DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
	- Delete all Record
		DELETE FROM table_name;



SELECT TOP, LIMIT, FETCH FIRST or ROWNUM Clause
- The SELECT TOP clause is used to specify the number of records to return.
- The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, 
while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.


MYSQL syntax:
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

Example
SELECT * FROM Customers
LIMIT 3;

















